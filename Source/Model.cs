//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.VendorOrders
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Client 
    {
        private string _baseUrl = "https://sellingpartnerapi-na.amazon.com";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public Client(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <remarks>
        /// Returns a list of purchase orders created or changed during the time frame that you specify. You define the time frame using the createdAfter, createdBefore, changedAfter and changedBefore parameters. The date range to search must not be more than 7 days. You can choose to get only the purchase order numbers by setting includeDetails to false. You can then use the getPurchaseOrder operation to receive details for a specific purchase order.
        /// <br/>
        /// <br/>**Usage Plans:**
        /// <br/>
        /// <br/>| Plan type | Rate (requests per second) | Burst |
        /// <br/>| ---- | ---- | ---- |
        /// <br/>|Default| 10 | 10 |
        /// <br/>|Selling partner specific| Variable | Variable |
        /// <br/>
        /// <br/>The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
        /// </remarks>
        /// <param name="limit">The limit to the number of records returned. Default value is 100 records.</param>
        /// <param name="createdAfter">Purchase orders that became available after this time will be included in the result. Must be in ISO-8601 date/time format.</param>
        /// <param name="createdBefore">Purchase orders that became available before this time will be included in the result. Must be in ISO-8601 date/time format.</param>
        /// <param name="sortOrder">Sort in ascending or descending order by purchase order creation date.</param>
        /// <param name="nextToken">Used for pagination when there is more purchase orders than the specified result size limit. The token value is returned in the previous API call</param>
        /// <param name="includeDetails">When true, returns purchase orders with complete details. Otherwise, only purchase order numbers are returned. Default value is true.</param>
        /// <param name="changedAfter">Purchase orders that changed after this timestamp will be included in the result. Must be in ISO-8601 date/time format.</param>
        /// <param name="changedBefore">Purchase orders that changed before this timestamp will be included in the result. Must be in ISO-8601 date/time format.</param>
        /// <param name="poItemState">Current state of the purchase order item. If this value is Cancelled, this API will return purchase orders which have one or more items cancelled by Amazon with updated item quantity as zero.</param>
        /// <param name="isPOChanged">When true, returns purchase orders which were modified after the order was placed. Vendors are required to pull the changed purchase order and fulfill the updated purchase order and not the original one. Default value is false.</param>
        /// <param name="purchaseOrderState">Filters purchase orders based on the purchase order state.</param>
        /// <param name="orderingVendorCode">Filters purchase orders based on the specified ordering vendor code. This value should be same as 'sellingParty.partyId' in the purchase order. If not included in the filter, all purchase orders for all of the vendor codes that exist in the vendor group used to authorize the API client application are returned.</param>
        /// <returns>Success.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GetPurchaseOrdersResponse> GetPurchaseOrdersAsync(long? limit, System.DateTimeOffset? createdAfter, System.DateTimeOffset? createdBefore, SortOrder? sortOrder, string nextToken, string includeDetails, System.DateTimeOffset? changedAfter, System.DateTimeOffset? changedBefore, PoItemState? poItemState, string isPOChanged, PurchaseOrderState? purchaseOrderState, string orderingVendorCode)
        {
            return GetPurchaseOrdersAsync(limit, createdAfter, createdBefore, sortOrder, nextToken, includeDetails, changedAfter, changedBefore, poItemState, isPOChanged, purchaseOrderState, orderingVendorCode, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns a list of purchase orders created or changed during the time frame that you specify. You define the time frame using the createdAfter, createdBefore, changedAfter and changedBefore parameters. The date range to search must not be more than 7 days. You can choose to get only the purchase order numbers by setting includeDetails to false. You can then use the getPurchaseOrder operation to receive details for a specific purchase order.
        /// <br/>
        /// <br/>**Usage Plans:**
        /// <br/>
        /// <br/>| Plan type | Rate (requests per second) | Burst |
        /// <br/>| ---- | ---- | ---- |
        /// <br/>|Default| 10 | 10 |
        /// <br/>|Selling partner specific| Variable | Variable |
        /// <br/>
        /// <br/>The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
        /// </remarks>
        /// <param name="limit">The limit to the number of records returned. Default value is 100 records.</param>
        /// <param name="createdAfter">Purchase orders that became available after this time will be included in the result. Must be in ISO-8601 date/time format.</param>
        /// <param name="createdBefore">Purchase orders that became available before this time will be included in the result. Must be in ISO-8601 date/time format.</param>
        /// <param name="sortOrder">Sort in ascending or descending order by purchase order creation date.</param>
        /// <param name="nextToken">Used for pagination when there is more purchase orders than the specified result size limit. The token value is returned in the previous API call</param>
        /// <param name="includeDetails">When true, returns purchase orders with complete details. Otherwise, only purchase order numbers are returned. Default value is true.</param>
        /// <param name="changedAfter">Purchase orders that changed after this timestamp will be included in the result. Must be in ISO-8601 date/time format.</param>
        /// <param name="changedBefore">Purchase orders that changed before this timestamp will be included in the result. Must be in ISO-8601 date/time format.</param>
        /// <param name="poItemState">Current state of the purchase order item. If this value is Cancelled, this API will return purchase orders which have one or more items cancelled by Amazon with updated item quantity as zero.</param>
        /// <param name="isPOChanged">When true, returns purchase orders which were modified after the order was placed. Vendors are required to pull the changed purchase order and fulfill the updated purchase order and not the original one. Default value is false.</param>
        /// <param name="purchaseOrderState">Filters purchase orders based on the purchase order state.</param>
        /// <param name="orderingVendorCode">Filters purchase orders based on the specified ordering vendor code. This value should be same as 'sellingParty.partyId' in the purchase order. If not included in the filter, all purchase orders for all of the vendor codes that exist in the vendor group used to authorize the API client application are returned.</param>
        /// <returns>Success.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetPurchaseOrdersResponse> GetPurchaseOrdersAsync(long? limit, System.DateTimeOffset? createdAfter, System.DateTimeOffset? createdBefore, SortOrder? sortOrder, string nextToken, string includeDetails, System.DateTimeOffset? changedAfter, System.DateTimeOffset? changedBefore, PoItemState? poItemState, string isPOChanged, PurchaseOrderState? purchaseOrderState, string orderingVendorCode, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/vendor/orders/v1/purchaseOrders?");
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdAfter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdAfter") + "=").Append(System.Uri.EscapeDataString(createdAfter.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdBefore != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdBefore") + "=").Append(System.Uri.EscapeDataString(createdBefore.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sortOrder != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sortOrder") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sortOrder, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nextToken != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("nextToken") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nextToken, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeDetails != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeDetails") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeDetails, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (changedAfter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("changedAfter") + "=").Append(System.Uri.EscapeDataString(changedAfter.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (changedBefore != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("changedBefore") + "=").Append(System.Uri.EscapeDataString(changedBefore.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (poItemState != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("poItemState") + "=").Append(System.Uri.EscapeDataString(ConvertToString(poItemState, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isPOChanged != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("isPOChanged") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isPOChanged, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (purchaseOrderState != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("purchaseOrderState") + "=").Append(System.Uri.EscapeDataString(ConvertToString(purchaseOrderState, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderingVendorCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderingVendorCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderingVendorCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPurchaseOrdersResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPurchaseOrdersResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<GetPurchaseOrdersResponse>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPurchaseOrdersResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<GetPurchaseOrdersResponse>("Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPurchaseOrdersResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<GetPurchaseOrdersResponse>("The resource specified does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 415)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPurchaseOrdersResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<GetPurchaseOrdersResponse>("The request payload is in an unsupported format.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPurchaseOrdersResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<GetPurchaseOrdersResponse>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPurchaseOrdersResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<GetPurchaseOrdersResponse>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPurchaseOrdersResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<GetPurchaseOrdersResponse>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns a purchase order based on the purchaseOrderNumber value that you specify.
        /// <br/>
        /// <br/>**Usage Plans:**
        /// <br/>
        /// <br/>| Plan type | Rate (requests per second) | Burst |
        /// <br/>| ---- | ---- | ---- |
        /// <br/>|Default| 10 | 10 |
        /// <br/>|Selling partner specific| Variable | Variable |
        /// <br/>
        /// <br/>The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
        /// </remarks>
        /// <param name="purchaseOrderNumber">The purchase order identifier for the order that you want. Formatting Notes: 8-character alpha-numeric code.</param>
        /// <returns>Success.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GetPurchaseOrderResponse> GetPurchaseOrderAsync(string purchaseOrderNumber)
        {
            return GetPurchaseOrderAsync(purchaseOrderNumber, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns a purchase order based on the purchaseOrderNumber value that you specify.
        /// <br/>
        /// <br/>**Usage Plans:**
        /// <br/>
        /// <br/>| Plan type | Rate (requests per second) | Burst |
        /// <br/>| ---- | ---- | ---- |
        /// <br/>|Default| 10 | 10 |
        /// <br/>|Selling partner specific| Variable | Variable |
        /// <br/>
        /// <br/>The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
        /// </remarks>
        /// <param name="purchaseOrderNumber">The purchase order identifier for the order that you want. Formatting Notes: 8-character alpha-numeric code.</param>
        /// <returns>Success.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetPurchaseOrderResponse> GetPurchaseOrderAsync(string purchaseOrderNumber, System.Threading.CancellationToken cancellationToken)
        {
            if (purchaseOrderNumber == null)
                throw new System.ArgumentNullException("purchaseOrderNumber");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/vendor/orders/v1/purchaseOrders/{purchaseOrderNumber}");
            urlBuilder_.Replace("{purchaseOrderNumber}", System.Uri.EscapeDataString(ConvertToString(purchaseOrderNumber, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPurchaseOrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPurchaseOrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<GetPurchaseOrderResponse>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPurchaseOrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<GetPurchaseOrderResponse>("The request\'s Authorization header is not formatted correctly or does not contain a valid token.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPurchaseOrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<GetPurchaseOrderResponse>("Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPurchaseOrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<GetPurchaseOrderResponse>("The resource specified does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 415)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPurchaseOrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<GetPurchaseOrderResponse>("The request payload is in an unsupported format.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPurchaseOrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<GetPurchaseOrderResponse>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPurchaseOrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<GetPurchaseOrderResponse>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPurchaseOrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<GetPurchaseOrderResponse>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Submits acknowledgements for one or more purchase orders.
        /// <br/>
        /// <br/>**Usage Plans:**
        /// <br/>
        /// <br/>| Plan type | Rate (requests per second) | Burst |
        /// <br/>| ---- | ---- | ---- |
        /// <br/>|Default| 10 | 10 |
        /// <br/>|Selling partner specific| Variable | Variable |
        /// <br/>
        /// <br/>The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
        /// </remarks>
        /// <returns>Success.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SubmitAcknowledgementResponse> SubmitAcknowledgementAsync(SubmitAcknowledgementRequest body)
        {
            return SubmitAcknowledgementAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Submits acknowledgements for one or more purchase orders.
        /// <br/>
        /// <br/>**Usage Plans:**
        /// <br/>
        /// <br/>| Plan type | Rate (requests per second) | Burst |
        /// <br/>| ---- | ---- | ---- |
        /// <br/>|Default| 10 | 10 |
        /// <br/>|Selling partner specific| Variable | Variable |
        /// <br/>
        /// <br/>The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
        /// </remarks>
        /// <returns>Success.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SubmitAcknowledgementResponse> SubmitAcknowledgementAsync(SubmitAcknowledgementRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/vendor/orders/v1/acknowledgements");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SubmitAcknowledgementResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SubmitAcknowledgementResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<SubmitAcknowledgementResponse>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SubmitAcknowledgementResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<SubmitAcknowledgementResponse>("Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SubmitAcknowledgementResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<SubmitAcknowledgementResponse>("The resource specified does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 413)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SubmitAcknowledgementResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<SubmitAcknowledgementResponse>("The request size exceeded the maximum accepted size.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 415)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SubmitAcknowledgementResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<SubmitAcknowledgementResponse>("The request payload is in an unsupported format.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SubmitAcknowledgementResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<SubmitAcknowledgementResponse>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SubmitAcknowledgementResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<SubmitAcknowledgementResponse>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SubmitAcknowledgementResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<SubmitAcknowledgementResponse>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns purchase order statuses based on the filters that you specify. Date range to search must not be more than 7 days. You can return a list of purchase order statuses using the available filters, or a single purchase order status by providing the purchase order number.
        /// <br/>
        /// <br/>**Usage Plans:**
        /// <br/>
        /// <br/>| Plan type | Rate (requests per second) | Burst |
        /// <br/>| ---- | ---- | ---- |
        /// <br/>|Default| 10 | 10 |
        /// <br/>|Selling partner specific| Variable | Variable |
        /// <br/>
        /// <br/>The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
        /// </remarks>
        /// <param name="limit">The limit to the number of records returned. Default value is 100 records.</param>
        /// <param name="sortOrder">Sort in ascending or descending order by purchase order creation date.</param>
        /// <param name="nextToken">Used for pagination when there are more purchase orders than the specified result size limit.</param>
        /// <param name="createdAfter">Purchase orders that became available after this timestamp will be included in the result. Must be in ISO-8601 date/time format.</param>
        /// <param name="createdBefore">Purchase orders that became available before this timestamp will be included in the result. Must be in ISO-8601 date/time format.</param>
        /// <param name="updatedAfter">Purchase orders for which the last purchase order update happened after this timestamp will be included in the result. Must be in ISO-8601 date/time format.</param>
        /// <param name="updatedBefore">Purchase orders for which the last purchase order update happened before this timestamp will be included in the result. Must be in ISO-8601 date/time format.</param>
        /// <param name="purchaseOrderNumber">Provides purchase order status for the specified purchase order number.</param>
        /// <param name="purchaseOrderStatus">Filters purchase orders based on the specified purchase order status. If not included in filter, this will return purchase orders for all statuses.</param>
        /// <param name="itemConfirmationStatus">Filters purchase orders based on their item confirmation status. If the item confirmation status is not included in the filter, purchase orders for all confirmation statuses are included.</param>
        /// <param name="itemReceiveStatus">Filters purchase orders based on the purchase order's item receive status. If the item receive status is not included in the filter, purchase orders for all receive statuses are included.</param>
        /// <param name="orderingVendorCode">Filters purchase orders based on the specified ordering vendor code. This value should be same as 'sellingParty.partyId' in the purchase order. If not included in filter, all purchase orders for all the vendor codes that exist in the vendor group used to authorize API client application are returned.</param>
        /// <param name="shipToPartyId">Filters purchase orders for a specific buyer's Fulfillment Center/warehouse by providing ship to location id here. This value should be same as 'shipToParty.partyId' in the purchase order. If not included in filter, this will return purchase orders for all the buyer's warehouses used for vendor group purchase orders.</param>
        /// <returns>Success.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GetPurchaseOrdersStatusResponse> GetPurchaseOrdersStatusAsync(long? limit, SortOrder2? sortOrder, string nextToken, System.DateTimeOffset? createdAfter, System.DateTimeOffset? createdBefore, System.DateTimeOffset? updatedAfter, System.DateTimeOffset? updatedBefore, string purchaseOrderNumber, PurchaseOrderStatus? purchaseOrderStatus, ItemConfirmationStatus? itemConfirmationStatus, ItemReceiveStatus? itemReceiveStatus, string orderingVendorCode, string shipToPartyId)
        {
            return GetPurchaseOrdersStatusAsync(limit, sortOrder, nextToken, createdAfter, createdBefore, updatedAfter, updatedBefore, purchaseOrderNumber, purchaseOrderStatus, itemConfirmationStatus, itemReceiveStatus, orderingVendorCode, shipToPartyId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns purchase order statuses based on the filters that you specify. Date range to search must not be more than 7 days. You can return a list of purchase order statuses using the available filters, or a single purchase order status by providing the purchase order number.
        /// <br/>
        /// <br/>**Usage Plans:**
        /// <br/>
        /// <br/>| Plan type | Rate (requests per second) | Burst |
        /// <br/>| ---- | ---- | ---- |
        /// <br/>|Default| 10 | 10 |
        /// <br/>|Selling partner specific| Variable | Variable |
        /// <br/>
        /// <br/>The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
        /// </remarks>
        /// <param name="limit">The limit to the number of records returned. Default value is 100 records.</param>
        /// <param name="sortOrder">Sort in ascending or descending order by purchase order creation date.</param>
        /// <param name="nextToken">Used for pagination when there are more purchase orders than the specified result size limit.</param>
        /// <param name="createdAfter">Purchase orders that became available after this timestamp will be included in the result. Must be in ISO-8601 date/time format.</param>
        /// <param name="createdBefore">Purchase orders that became available before this timestamp will be included in the result. Must be in ISO-8601 date/time format.</param>
        /// <param name="updatedAfter">Purchase orders for which the last purchase order update happened after this timestamp will be included in the result. Must be in ISO-8601 date/time format.</param>
        /// <param name="updatedBefore">Purchase orders for which the last purchase order update happened before this timestamp will be included in the result. Must be in ISO-8601 date/time format.</param>
        /// <param name="purchaseOrderNumber">Provides purchase order status for the specified purchase order number.</param>
        /// <param name="purchaseOrderStatus">Filters purchase orders based on the specified purchase order status. If not included in filter, this will return purchase orders for all statuses.</param>
        /// <param name="itemConfirmationStatus">Filters purchase orders based on their item confirmation status. If the item confirmation status is not included in the filter, purchase orders for all confirmation statuses are included.</param>
        /// <param name="itemReceiveStatus">Filters purchase orders based on the purchase order's item receive status. If the item receive status is not included in the filter, purchase orders for all receive statuses are included.</param>
        /// <param name="orderingVendorCode">Filters purchase orders based on the specified ordering vendor code. This value should be same as 'sellingParty.partyId' in the purchase order. If not included in filter, all purchase orders for all the vendor codes that exist in the vendor group used to authorize API client application are returned.</param>
        /// <param name="shipToPartyId">Filters purchase orders for a specific buyer's Fulfillment Center/warehouse by providing ship to location id here. This value should be same as 'shipToParty.partyId' in the purchase order. If not included in filter, this will return purchase orders for all the buyer's warehouses used for vendor group purchase orders.</param>
        /// <returns>Success.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetPurchaseOrdersStatusResponse> GetPurchaseOrdersStatusAsync(long? limit, SortOrder2? sortOrder, string nextToken, System.DateTimeOffset? createdAfter, System.DateTimeOffset? createdBefore, System.DateTimeOffset? updatedAfter, System.DateTimeOffset? updatedBefore, string purchaseOrderNumber, PurchaseOrderStatus? purchaseOrderStatus, ItemConfirmationStatus? itemConfirmationStatus, ItemReceiveStatus? itemReceiveStatus, string orderingVendorCode, string shipToPartyId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/vendor/orders/v1/purchaseOrdersStatus?");
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sortOrder != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sortOrder") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sortOrder, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nextToken != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("nextToken") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nextToken, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdAfter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdAfter") + "=").Append(System.Uri.EscapeDataString(createdAfter.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdBefore != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdBefore") + "=").Append(System.Uri.EscapeDataString(createdBefore.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (updatedAfter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("updatedAfter") + "=").Append(System.Uri.EscapeDataString(updatedAfter.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (updatedBefore != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("updatedBefore") + "=").Append(System.Uri.EscapeDataString(updatedBefore.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (purchaseOrderNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("purchaseOrderNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(purchaseOrderNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (purchaseOrderStatus != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("purchaseOrderStatus") + "=").Append(System.Uri.EscapeDataString(ConvertToString(purchaseOrderStatus, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (itemConfirmationStatus != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("itemConfirmationStatus") + "=").Append(System.Uri.EscapeDataString(ConvertToString(itemConfirmationStatus, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (itemReceiveStatus != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("itemReceiveStatus") + "=").Append(System.Uri.EscapeDataString(ConvertToString(itemReceiveStatus, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderingVendorCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderingVendorCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderingVendorCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (shipToPartyId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("shipToPartyId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(shipToPartyId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPurchaseOrdersStatusResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPurchaseOrdersStatusResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<GetPurchaseOrdersStatusResponse>("Request has missing or invalid parameters and cannot be parsed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPurchaseOrdersStatusResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<GetPurchaseOrdersStatusResponse>("Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPurchaseOrdersStatusResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<GetPurchaseOrdersStatusResponse>("The resource specified does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 415)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPurchaseOrdersStatusResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<GetPurchaseOrdersStatusResponse>("The request payload is in an unsupported format.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPurchaseOrdersStatusResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<GetPurchaseOrdersStatusResponse>("The frequency of requests was greater than allowed.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPurchaseOrdersStatusResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<GetPurchaseOrdersStatusResponse>("An unexpected condition occurred that prevented the server from fulfilling the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPurchaseOrdersStatusResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<GetPurchaseOrdersStatusResponse>("Temporary overloading or maintenance of the server.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    /// <summary>
    /// The response schema for the getPurchaseOrders operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GetPurchaseOrdersResponse
    {
        /// <summary>
        /// A list of orders.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrderList Payload { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorList Errors { get; set; }

    }

    /// <summary>
    /// The response schema for the getPurchaseOrder operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GetPurchaseOrderResponse
    {
        /// <summary>
        /// The details of the requested order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Order Payload { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorList Errors { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class OrderList
    {
        [Newtonsoft.Json.JsonProperty("pagination", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Pagination Pagination { get; set; }

        [Newtonsoft.Json.JsonProperty("orders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Order> Orders { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Pagination
    {
        /// <summary>
        /// A generated string used to pass information to your next request. If NextToken is returned, pass the value of NextToken to the next request. If NextToken is not returned, there are no more purchase order items to return.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextToken { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Order
    {
        /// <summary>
        /// The purchase order number for this order. Formatting Notes: 8-character alpha-numeric code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purchaseOrderNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PurchaseOrderNumber { get; set; }

        /// <summary>
        /// This field will contain the current state of the purchase order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purchaseOrderState", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderPurchaseOrderState PurchaseOrderState { get; set; }

        /// <summary>
        /// Details of an order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrderDetails OrderDetails { get; set; }

    }

    /// <summary>
    /// Details of an order.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class OrderDetails
    {
        /// <summary>
        /// The date the purchase order was placed. Must be in ISO-8601 date/time format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purchaseOrderDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset PurchaseOrderDate { get; set; }

        /// <summary>
        /// The date when purchase order was last changed by Amazon after the order was placed. This date will be greater than 'purchaseOrderDate'. This means the PO data was changed on that date and vendors are required to fulfill the  updated PO. The PO changes can be related to Item Quantity, Ship to Location, Ship Window etc. This field will not be present in orders that have not changed after creation. Must be in ISO-8601 date/time format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purchaseOrderChangedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? PurchaseOrderChangedDate { get; set; }

        /// <summary>
        /// The date when current purchase order state was changed. Current purchase order state is available in the field 'purchaseOrderState'. Must be in ISO-8601 date/time format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purchaseOrderStateChangedDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset PurchaseOrderStateChangedDate { get; set; }

        /// <summary>
        /// Type of purchase order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purchaseOrderType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderDetailsPurchaseOrderType? PurchaseOrderType { get; set; }

        /// <summary>
        /// If the purchase order is an import order, the details for the import order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("importDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ImportDetails ImportDetails { get; set; }

        /// <summary>
        /// If requested by the recipient, this field will contain a promotional/deal number. The discount code line is optional. It is used to obtain a price discount on items on the order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dealCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DealCode { get; set; }

        /// <summary>
        /// Payment method used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderDetailsPaymentMethod? PaymentMethod { get; set; }

        /// <summary>
        /// Name/Address and tax details of the buying party.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("buyingParty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PartyIdentification BuyingParty { get; set; }

        /// <summary>
        /// Name/Address and tax details of the selling party.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sellingParty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PartyIdentification SellingParty { get; set; }

        /// <summary>
        /// Name/Address and tax details of the ship to party.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipToParty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PartyIdentification ShipToParty { get; set; }

        /// <summary>
        /// Name/Address and tax details of the bill to party.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("billToParty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PartyIdentification BillToParty { get; set; }

        /// <summary>
        /// This indicates the ship window. Format is start and end date separated by double hyphen (--). For example, 2007-03-01T13:00:00Z--2007-03-11T15:30:00Z.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipWindow", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShipWindow { get; set; }

        /// <summary>
        /// This indicates the delivery window. Format is start and end date separated by double hyphen (--). For example, 2007-03-01T13:00:00Z--2007-03-11T15:30:00Z.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryWindow", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeliveryWindow { get; set; }

        /// <summary>
        /// A list of items in this purchase order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<OrderItem> Items { get; set; } = new System.Collections.ObjectModel.Collection<OrderItem>();

    }

    /// <summary>
    /// Import details for an import order.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ImportDetails
    {
        /// <summary>
        /// If the recipient requests, contains the shipment method of payment. This is for import PO's only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("methodOfPayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ImportDetailsMethodOfPayment? MethodOfPayment { get; set; }

        /// <summary>
        /// Incoterms (International Commercial Terms) are used to divide transaction costs and responsibilities between buyer and seller and reflect state-of-the-art transportation practices. This is for import purchase orders only. 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("internationalCommercialTerms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ImportDetailsInternationalCommercialTerms? InternationalCommercialTerms { get; set; }

        /// <summary>
        /// The port where goods on an import purchase order must be delivered by the vendor. This should only be specified when the internationalCommercialTerms is FOB.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("portOfDelivery", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string PortOfDelivery { get; set; }

        /// <summary>
        /// Types and numbers of container(s) for import purchase orders. Can be a comma-separated list if the shipment has multiple containers. HC signifies a high-capacity container. Free-text field, limited to 64 characters. The format will be a comma-delimited list containing values of the type: $NUMBER_OF_CONTAINERS_OF_THIS_TYPE-$CONTAINER_TYPE. The list of values for the container type is: 40'(40-foot container), 40'HC (40-foot high-capacity container), 45', 45'HC, 30', 30'HC, 20', 20'HC.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("importContainers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string ImportContainers { get; set; }

        /// <summary>
        /// Special instructions regarding the shipment. This field is for import purchase orders.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shippingInstructions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShippingInstructions { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PartyIdentification
    {
        /// <summary>
        /// Assigned identification for the party. For example, warehouse code or vendor code. Please refer to specific party for more details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partyId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PartyId { get; set; }

        /// <summary>
        /// Identification of the party by address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address Address { get; set; }

        /// <summary>
        /// Tax registration details of the party.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaxRegistrationDetails TaxInfo { get; set; }

    }

    /// <summary>
    /// Tax registration details of the entity.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class TaxRegistrationDetails
    {
        /// <summary>
        /// Tax registration type for the entity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxRegistrationType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TaxRegistrationDetailsTaxRegistrationType TaxRegistrationType { get; set; }

        /// <summary>
        /// Tax registration number for the entity. For example, VAT ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxRegistrationNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TaxRegistrationNumber { get; set; }

    }

    /// <summary>
    /// Address of the party.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Address
    {
        /// <summary>
        /// The name of the person, business or institution at that address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// First line of the address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addressLine1", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AddressLine1 { get; set; }

        /// <summary>
        /// Additional address information, if required.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addressLine2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressLine2 { get; set; }

        /// <summary>
        /// Additional address information, if required.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addressLine3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressLine3 { get; set; }

        /// <summary>
        /// The city where the person, business or institution is located.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }

        /// <summary>
        /// The county where person, business or institution is located.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("county", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string County { get; set; }

        /// <summary>
        /// The district where person, business or institution is located.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("district", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string District { get; set; }

        /// <summary>
        /// The state or region where person, business or institution is located.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stateOrRegion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StateOrRegion { get; set; }

        /// <summary>
        /// The postal code of that address. It conatins a series of letters or digits or both, sometimes including spaces or punctuation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalCode { get; set; }

        /// <summary>
        /// The two digit country code. In ISO 3166-1 alpha-2 format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string CountryCode { get; set; }

        /// <summary>
        /// The phone number of the person, business or institution located at that address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class OrderItem
    {
        /// <summary>
        /// Numbering of the item on the purchase order. The first item will be 1, the second 2, and so on.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("itemSequenceNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ItemSequenceNumber { get; set; }

        /// <summary>
        /// Amazon Standard Identification Number (ASIN) of an item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amazonProductIdentifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AmazonProductIdentifier { get; set; }

        /// <summary>
        /// The vendor selected product identification of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vendorProductIdentifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VendorProductIdentifier { get; set; }

        /// <summary>
        /// Item quantity ordered.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderedQuantity", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ItemQuantity OrderedQuantity { get; set; } = new ItemQuantity();

        /// <summary>
        /// When true, we will accept backorder confirmations for this item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isBackOrderAllowed", Required = Newtonsoft.Json.Required.Always)]
        public bool IsBackOrderAllowed { get; set; }

        /// <summary>
        /// The price to Amazon each (cost).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("netCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Money NetCost { get; set; }

        /// <summary>
        /// The price to Amazon each (list).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("listPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Money ListPrice { get; set; }

    }

    /// <summary>
    /// An amount of money, including units in the form of currency.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Money
    {
        /// <summary>
        /// Three digit currency code in ISO 4217 format. String of length 3.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string CurrencyCode { get; set; }

        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Amount { get; set; }

    }

    /// <summary>
    /// The response schema for the submitAcknowledgement operation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SubmitAcknowledgementResponse
    {
        /// <summary>
        /// The payload for the submitAcknowledgement operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TransactionId Payload { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorList Errors { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class TransactionId
    {
        /// <summary>
        /// GUID assigned by Amazon to identify this transaction. This value can be used with the Transaction Status API to return the status of this transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionId1 { get; set; }

    }

    /// <summary>
    /// A list of error responses returned when a request is unsuccessful.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ErrorList : System.Collections.ObjectModel.Collection<Error>
    {

    }

    /// <summary>
    /// The request schema for the submitAcknowledgment operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SubmitAcknowledgementRequest
    {
        [Newtonsoft.Json.JsonProperty("acknowledgements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OrderAcknowledgement> Acknowledgements { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class OrderAcknowledgement
    {
        /// <summary>
        /// The purchase order number. Formatting Notes: 8-character alpha-numeric code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purchaseOrderNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PurchaseOrderNumber { get; set; }

        /// <summary>
        /// Name, address and tax details of the party receiving a shipment of products.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sellingParty", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PartyIdentification SellingParty { get; set; } = new PartyIdentification();

        /// <summary>
        /// The date and time when the purchase order is acknowledged, in ISO-8601 date/time format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("acknowledgementDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset AcknowledgementDate { get; set; }

        /// <summary>
        /// A list of the items being acknowledged with associated details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<OrderAcknowledgementItem> Items { get; set; } = new System.Collections.ObjectModel.Collection<OrderAcknowledgementItem>();

    }

    /// <summary>
    /// Details of the item being acknowledged.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class OrderAcknowledgementItem
    {
        /// <summary>
        /// Line item sequence number for the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("itemSequenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemSequenceNumber { get; set; }

        /// <summary>
        /// Amazon Standard Identification Number (ASIN) of an item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amazonProductIdentifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AmazonProductIdentifier { get; set; }

        /// <summary>
        /// The vendor selected product identification of the item. Should be the same as was sent in the purchase order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vendorProductIdentifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VendorProductIdentifier { get; set; }

        /// <summary>
        /// The quantity of this item ordered.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderedQuantity", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ItemQuantity OrderedQuantity { get; set; } = new ItemQuantity();

        /// <summary>
        /// The cost to Amazon, which should match the cost on the invoice. This is a required field. If this is left blank the file will reject in Amazon systems. Price information should not be zero or negative. Indicates a net unit price.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("netCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Money NetCost { get; set; }

        /// <summary>
        /// The list price. This is required only if a vendor sells books with a list price.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("listPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Money ListPrice { get; set; }

        /// <summary>
        /// The discount multiplier that should be applied to the price if a vendor sells books with a list price. This is a multiplier factor to arrive at a final discounted price. A multiplier of .90 would be the factor if a 10% discount is given.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("discountMultiplier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DiscountMultiplier { get; set; }

        /// <summary>
        /// This is used to indicate acknowledged quantity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("itemAcknowledgements", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<OrderItemAcknowledgement> ItemAcknowledgements { get; set; } = new System.Collections.ObjectModel.Collection<OrderItemAcknowledgement>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class OrderItemAcknowledgement
    {
        /// <summary>
        /// This indicates the acknowledgement code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("acknowledgementCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderItemAcknowledgementAcknowledgementCode AcknowledgementCode { get; set; }

        /// <summary>
        /// Details of quantity acknowledged with the above acknowledgement code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("acknowledgedQuantity", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ItemQuantity AcknowledgedQuantity { get; set; } = new ItemQuantity();

        /// <summary>
        /// Estimated ship date per line item. Must be in ISO-8601 date/time format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scheduledShipDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ScheduledShipDate { get; set; }

        /// <summary>
        /// Estimated delivery date per line item. Must be in ISO-8601 date/time format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scheduledDeliveryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ScheduledDeliveryDate { get; set; }

        /// <summary>
        /// Indicates the reason for rejection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rejectionReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderItemAcknowledgementRejectionReason? RejectionReason { get; set; }

    }

    /// <summary>
    /// Details of quantity ordered.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ItemQuantity
    {
        /// <summary>
        /// Acknowledged quantity. This value should not be zero.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Amount { get; set; }

        /// <summary>
        /// Unit of measure for the acknowledged quantity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unitOfMeasure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ItemQuantityUnitOfMeasure? UnitOfMeasure { get; set; }

        /// <summary>
        /// The case size, in the event that we ordered using cases.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unitSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? UnitSize { get; set; }

    }

    /// <summary>
    /// The response schema for the getPurchaseOrdersStatus operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GetPurchaseOrdersStatusResponse
    {
        /// <summary>
        /// Current status of list of purchase orders.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrderListStatus Payload { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorList Errors { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class OrderListStatus
    {
        [Newtonsoft.Json.JsonProperty("pagination", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Pagination Pagination { get; set; }

        [Newtonsoft.Json.JsonProperty("ordersStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OrderStatus> OrdersStatus { get; set; }

    }

    /// <summary>
    /// Current status of a purchase order.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class OrderStatus
    {
        /// <summary>
        /// The buyer's purchase order number for this order. Formatting Notes: 8-character alpha-numeric code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purchaseOrderNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PurchaseOrderNumber { get; set; }

        /// <summary>
        /// The status of the buyer's purchase order for this order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purchaseOrderStatus", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderStatusPurchaseOrderStatus PurchaseOrderStatus { get; set; }

        /// <summary>
        /// The date the purchase order was placed. Must be in ISO-8601 date/time format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purchaseOrderDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset PurchaseOrderDate { get; set; }

        /// <summary>
        /// The date when the purchase order was last updated. Must be in ISO-8601 date/time format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastUpdatedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastUpdatedDate { get; set; }

        /// <summary>
        /// Name/Address and tax details of the selling party.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sellingParty", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PartyIdentification SellingParty { get; set; } = new PartyIdentification();

        /// <summary>
        /// Name/Address and tax details of the ship to party.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipToParty", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PartyIdentification ShipToParty { get; set; } = new PartyIdentification();

        /// <summary>
        /// Detailed order status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("itemStatus", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ItemStatus ItemStatus { get; set; } = new ItemStatus();

    }

    /// <summary>
    /// Detailed description of items order status.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ItemStatus : System.Collections.ObjectModel.Collection<OrderItemStatus>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class OrderItemStatus
    {
        /// <summary>
        /// Numbering of the item on the purchase order. The first item will be 1, the second 2, and so on.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("itemSequenceNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ItemSequenceNumber { get; set; }

        /// <summary>
        /// Buyer's Standard Identification Number (ASIN) of an item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("buyerProductIdentifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BuyerProductIdentifier { get; set; }

        /// <summary>
        /// The vendor selected product identification of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vendorProductIdentifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VendorProductIdentifier { get; set; }

        /// <summary>
        /// The net cost to Amazon each (cost).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("netCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Money NetCost { get; set; }

        /// <summary>
        /// The list Price to Amazon each (list).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("listPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Money ListPrice { get; set; }

        /// <summary>
        /// Ordered quantity information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderedQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrderedQuantity OrderedQuantity { get; set; }

        /// <summary>
        /// Acknowledgement status information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("acknowledgementStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AcknowledgementStatus AcknowledgementStatus { get; set; }

        /// <summary>
        /// Item receive status at the buyer's warehouse.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("receivingStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReceivingStatus ReceivingStatus { get; set; }

    }

    /// <summary>
    /// Details of item quantity ordered
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class OrderedQuantityDetails
    {
        /// <summary>
        /// The date when the line item quantity was updated by buyer. Must be in ISO-8601 date/time format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? UpdatedDate { get; set; }

        /// <summary>
        /// Item quantity ordered.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderedQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ItemQuantity OrderedQuantity { get; set; }

        /// <summary>
        /// Item quantity ordered.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cancelledQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ItemQuantity CancelledQuantity { get; set; }

    }

    /// <summary>
    /// Details of item quantity ordered
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AcknowledgementStatusDetails
    {
        /// <summary>
        /// The date when the line item was confirmed by vendor. Must be in ISO-8601 date/time format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("acknowledgementDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? AcknowledgementDate { get; set; }

        /// <summary>
        /// Item quantity accepted by vendor to be shipped.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("acceptedQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ItemQuantity AcceptedQuantity { get; set; }

        /// <summary>
        /// Item quantity rejected by vendor.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rejectedQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ItemQuantity RejectedQuantity { get; set; }

    }

    /// <summary>
    /// Error response returned when the request is unsuccessful.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Error
    {
        /// <summary>
        /// An error code that identifies the type of error that occurred.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; set; }

        /// <summary>
        /// A message that describes the error condition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        /// <summary>
        /// Additional details that can help the caller understand or fix the issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Details { get; set; }

    }

    /// <summary>
    /// Sort in ascending or descending order by purchase order creation date.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum SortOrder
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ASC")]
        ASC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DESC")]
        DESC = 1,

    }

    /// <summary>
    /// Current state of the purchase order item. If this value is Cancelled, this API will return purchase orders which have one or more items cancelled by Amazon with updated item quantity as zero.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum PoItemState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 0,

    }

    /// <summary>
    /// Filters purchase orders based on the purchase order state.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum PurchaseOrderState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"New")]
        New = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Acknowledged")]
        Acknowledged = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Closed")]
        Closed = 2,

    }

    /// <summary>
    /// Sort in ascending or descending order by purchase order creation date.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum SortOrder2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ASC")]
        ASC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DESC")]
        DESC = 1,

    }

    /// <summary>
    /// Filters purchase orders based on the specified purchase order status. If not included in filter, this will return purchase orders for all statuses.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum PurchaseOrderStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"OPEN")]
        OPEN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CLOSED")]
        CLOSED = 1,

    }

    /// <summary>
    /// Filters purchase orders based on their item confirmation status. If the item confirmation status is not included in the filter, purchase orders for all confirmation statuses are included.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ItemConfirmationStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ACCEPTED")]
        ACCEPTED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PARTIALLY_ACCEPTED")]
        PARTIALLY_ACCEPTED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"REJECTED")]
        REJECTED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"UNCONFIRMED")]
        UNCONFIRMED = 3,

    }

    /// <summary>
    /// Filters purchase orders based on the purchase order's item receive status. If the item receive status is not included in the filter, purchase orders for all receive statuses are included.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ItemReceiveStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_RECEIVED")]
        NOT_RECEIVED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PARTIALLY_RECEIVED")]
        PARTIALLY_RECEIVED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"RECEIVED")]
        RECEIVED = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum OrderPurchaseOrderState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"New")]
        New = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Acknowledged")]
        Acknowledged = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Closed")]
        Closed = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum OrderDetailsPurchaseOrderType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"RegularOrder")]
        RegularOrder = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ConsignedOrder")]
        ConsignedOrder = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NewProductIntroduction")]
        NewProductIntroduction = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"RushOrder")]
        RushOrder = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum OrderDetailsPaymentMethod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Invoice")]
        Invoice = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Consignment")]
        Consignment = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CreditCard")]
        CreditCard = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Prepaid")]
        Prepaid = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ImportDetailsMethodOfPayment
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PaidByBuyer")]
        PaidByBuyer = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CollectOnDelivery")]
        CollectOnDelivery = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DefinedByBuyerAndSeller")]
        DefinedByBuyerAndSeller = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FOBPortOfCall")]
        FOBPortOfCall = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PrepaidBySeller")]
        PrepaidBySeller = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PaidBySeller")]
        PaidBySeller = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ImportDetailsInternationalCommercialTerms
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ExWorks")]
        ExWorks = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FreeCarrier")]
        FreeCarrier = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FreeOnBoard")]
        FreeOnBoard = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FreeAlongSideShip")]
        FreeAlongSideShip = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CarriagePaidTo")]
        CarriagePaidTo = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CostAndFreight")]
        CostAndFreight = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"CarriageAndInsurancePaidTo")]
        CarriageAndInsurancePaidTo = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"CostInsuranceAndFreight")]
        CostInsuranceAndFreight = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"DeliveredAtTerminal")]
        DeliveredAtTerminal = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"DeliveredAtPlace")]
        DeliveredAtPlace = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"DeliverDutyPaid")]
        DeliverDutyPaid = 10,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum TaxRegistrationDetailsTaxRegistrationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"VAT")]
        VAT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"GST")]
        GST = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum OrderItemAcknowledgementAcknowledgementCode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Accepted")]
        Accepted = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Backordered")]
        Backordered = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Rejected")]
        Rejected = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum OrderItemAcknowledgementRejectionReason
    {

        [System.Runtime.Serialization.EnumMember(Value = @"TemporarilyUnavailable")]
        TemporarilyUnavailable = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"InvalidProductIdentifier")]
        InvalidProductIdentifier = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ObsoleteProduct")]
        ObsoleteProduct = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ItemQuantityUnitOfMeasure
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Cases")]
        Cases = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Eaches")]
        Eaches = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum OrderStatusPurchaseOrderStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"OPEN")]
        OPEN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CLOSED")]
        CLOSED = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class OrderedQuantity
    {
        /// <summary>
        /// Item quantity ordered.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderedQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ItemQuantity OrderedQuantity1 { get; set; }

        /// <summary>
        /// Details of item quantity ordered.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderedQuantityDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OrderedQuantityDetails> OrderedQuantityDetails { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AcknowledgementStatus
    {
        /// <summary>
        /// Confirmation status of line item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("confirmationStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AcknowledgementStatusConfirmationStatus? ConfirmationStatus { get; set; }

        /// <summary>
        /// Item quantities accepted by vendor to be shipped.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("acceptedQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ItemQuantity AcceptedQuantity { get; set; }

        /// <summary>
        /// Item quantities rejected by vendor.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rejectedQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ItemQuantity RejectedQuantity { get; set; }

        /// <summary>
        /// Details of item quantity confirmed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("acknowledgementStatusDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AcknowledgementStatusDetails> AcknowledgementStatusDetails { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ReceivingStatus
    {
        /// <summary>
        /// Receive status of the line item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("receiveStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ReceivingStatusReceiveStatus? ReceiveStatus { get; set; }

        /// <summary>
        /// The total item quantity received by the buyer so far.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("receivedQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ItemQuantity ReceivedQuantity { get; set; }

        /// <summary>
        /// The date when the most recent item was received at the buyer's warehouse. Must be in ISO-8601 date/time format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastReceiveDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastReceiveDate { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum AcknowledgementStatusConfirmationStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ACCEPTED")]
        ACCEPTED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PARTIALLY_ACCEPTED")]
        PARTIALLY_ACCEPTED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"REJECTED")]
        REJECTED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"UNCONFIRMED")]
        UNCONFIRMED = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ReceivingStatusReceiveStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_RECEIVED")]
        NOT_RECEIVED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PARTIALLY_RECEIVED")]
        PARTIALLY_RECEIVED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"RECEIVED")]
        RECEIVED = 2,

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603